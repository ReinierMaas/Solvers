using System;
using System.Text;
using Solvers.Utils;

namespace Solvers
{
    public class Sudoku
    {
        #region Input
        public static string[] sudokuInput9 =
        {
            "010020300004005060070000008006900070000100002030048000500006040000800106008000000",
            "010020300002003040050000006004700050000100003070068000300004090000600104006000000",
            "010020300002003040080000006004700030000600008070098000300004090000800104006000000",
            "010020300002003040050000006004200050000100007020087000300004080000600105006000000",
            "010020300002003040050000006004700050000100008070098000300004090000900804006000000",
            "010020300004003020050000006002700050000100008070098000300007090000600102007000000",
            "010020300002003040050000006004700050000100008070038000300005090000600104006000000",
            "010020300004001050060000007005400060000100002080092000300005090000700106007000000",
            "010020300003004050060000007005800060000100009080092000400005090000700106007000000",
            "010020300004003050050000006005700040000100002070082000300005090000600105006000000",
            "010020300002003040050000006004700050000100008070068000300004060000500104009000000",
            "010020300002003040050000006004700050000100008070095000300004090000900104006000000",
            "010020300004005060070000008006300070000100002030092000900006040000800106008000000",
            "080070100003002090060000004009500060000700005020041000100005020000200901004000000",
            "010020300002003040040000006004700050000600008070098000300005080000800104009000000",
            "020010700003008060010000003008600050000900004030021000400009080000500901007000000",
            "010020300003004050060000007005800060000100002080072000400005090000700104007000000",
            "010020300002003040050000006007800050000100004080094000300007090000400105006000000",
            "010020300004003020050000006007600050000100002060072000300008070000900108009000000",
            "010020300004003050060000007005800060000900001080012000300005010000700506002000000",
            "010020300004003050020000006005700020000100008070098000300005090000900205006000000",
            "010020300004003020050000006007800050000100002080042000300007040000600807006000000",
            "070050800005008020010000009008100050000200001090034000900002030000600107006000000",
            "010020300004005060070000004006800070000900002050017000400006050000400906008000000",
            "010020300004005060070000008006900080000100002090032000200006030000800105008000000",
            "010020300002003040050000006004700050000100008070098000200004090000600704006000000",
            "010020300002003040050000006004700050000100008070068000300004090000800104006000000",
            "010020300004001050060000007005800070000900002080014000300005010000700905007000000",
            "010020300004003020050000006002700050000800009070019000300002010000600805006000000",
            "010020300003004050060000007008900070000100002090082000200005080000700105007000000",
            "010020300004003050020000006007800040000100005080095000300007090000600107006000000",
            "010020300002003040050000006004700080000100003070068000300004090000600104006000000",
            "090020500004005010060000003001800060000900002080072000500001070000300901003000000",
            "010020300004001050060000007005800060000100003080092000300005090000700102007000000",
            "010020300002003040050000006004700050000100008020098000700004090000600104006000000",
            "010020300003004050060000004005700060000100002070032000400005080000900105009000000",
            "010020300004003050060000007005800040000100002080092000600005090000700105002000000",
            "010020300004003050060000007005100060000800002080092000300006090000700205007000000",
            "010020300004005060070000008006900030000100002090042000500006040000800106008000000",
            "010020300004003050060000007005200060000100008020048000300005090000700205009000000",
            "070040800009005060060000003004100070000200006020034000100008090000600401007000000",
            "010020300004003050060000007005200040000800001020091000300005090000700805007000000",
            "010020300004001050060000007005200060000800009020019000300005010000700805007000000",
            "010020300004001050060000007005800060000900002080014000300005010000700905007000000",
            "010020300004003050060000007005800060000100002070092000400005090000700105007000000",
            "010020300004005060050000004006700040000100002070082000300006080000900106009000000",
            "010020300004003050020000006005700080000100002070098000800005090000600105006000000",
            "010020300004003050060000007005800040000100008080092000300005090000700605007000000",
            "010020300004005060070000008006900040000100002090032000500006030000800906008000000",
            "010020300004003050060000007005800060000100002070092000300005090000700105007000000",
            "010020300002003040050000006004700050000600008070098000300004090000800104006000000",
            "010020300004003050060000007005800060000100009080042000300005040000700908001000000",
            "070060900006002030020000006003100040000200008050034000900003020000700105008000000",
            "010020300004003050060000001005700060000800002070012000400005090000400805007000000",
            "000943000060010050000000000800000003750060014100000009000000000020050080000374000",
            "000123000040050060000000000700000003860040092900000001000000000050060080000392000",
            "000123000040050060000000000700000003860040072500000001000000000070060050000382000",
            "000123000040050060000000000500000007360040052700000001000000000080060040000732000",
            "000123000040050060000000000100000003760040082500000009000000000090060040000378000",
            "000123000040050060000000000700000003460080052500000001000000000090060040000392000",
            "000427000060090080000000000900000008120030045500000007000000000040060030000715000",
            "000123000040050060000000000200000003760040082400000001000000000080060030000372000",
            "000123000040050060000000000100000003360040052200000007000000000080060040000972000",
            "000123000040050060000000000800000007460080052200000001000000000050060040000731000",
            "000123000040050060000000000100000003760080052800000009000000000080060040000372000",
            "000651000040020080000000000700000009120030045800000001000000000030040020000719000",
            "000398000050010060000000000800000009120030045700000008000000000040020010000769000",
            "000123000040050060000000000200000003570040082100000006000000000060070040000392000",
            "000123000040050060000000000700000008810040027500000003000000000090060040000387000",
            "000123000040050060000000000400000003560040072700000001000000000080060040000372000",
            "000123000040050060000000000700000003460080052500000001000000000070060040000394000",
            "000123000040050060000000000200000007760040082300000001000000000090080040000376000",
            "000123000040050060000000000100000003560040072800000009000000000070060040000382000",
            "000427000010090080000000000700000005120030046800000002000000000040060090000715000",
            "000398000050020060000000000800000009620050041700000008000000000040060020000419000",
            "000123000040050060000000000500000003760040052400000001000000000080060040000372000",
            "000758000040060010000000000700000008120030045600000009000000000030010090000826000",
            "000123000040050060000000000100000003760080041800000009000000000080060090000372000",
            "000123000040050060000000000200000007360040052400000001000000000080060040000712000",
            "000123000040050060000000000100000003260070081900000002000000000080060040000294000",
            "000123000040050060000000000700000006360040082200000001000000000080060040000732000",
            "000123000040050010000000000200000006670040052800000003000000000050010040000862000",
            "000123000040050010000000000200000006630040072800000003000000000050010040000862000",
            "000123000040050060000000000500000003360040057700000001000000000080060040000237000",
            "000123000040050060000000000400000003760040052500000008000000000070090040000312000",
            "000123000040050060000000000200000007760040082500000001000000000090080040000372000",
            "000123000040050060000000000200000007760080092500000001000000000080060040000372000",
            "000123000040050060000000000200000007780040092500000001000000000050090040000372000",
            "000716000030050020000000000700000006120030045500000001000000000090040080000182000",
            "000012300000400000105006700306000070700080009020000108001500403000001000003890000",
            "000012300000300000104005600305000060600070002080000105001400903000001000003720000",
            "000012300000400000102003400305000040400060007020000106001800903000001000003670000",
            "000012300000400000103005600705000060600080009020000108001300807000001000007890000",
            "000012300000400000102005600305000060600070008020000107007900403000001000003280000",
            "000012300000400000105006700806000040700050009020000105001300408000001000008590000",
            "000012300000400000105006700306000070700080005050000108001200403000001000003890000",
            "000012300000400000105006200306000020200070008080000107001500403000001000003740000",
            "000031200000200000509008100201000070400090001090000804007900602000003000003560000",
            "000021800000600000501008300208000040100050007070000908009700604000009000002410000",
            "000012300000400000105006700306000070700020004080000102001500903000001000003290000",
            "000012300000400000105006700306000070700020004020000108004500903000001000003840000",
            "000024800000500000904007200608000020700010009040000705003700406000001000002350000",
            "000012300000400000105006700306000050700060008020000109001500802000001000003980000",
            "000012300000300000104005600607000010800030007040000205002700106000004000009160000",
            "000031600000200000903008400206000040400060009070000108009700501000002000007390000",
            "000031800000200000907005200302000040800050009070000108009700501000002000006390000",
            "000091800000400000908003100403000010100020008070000903009800604000009000004250000",
            "000029100000600000106005800401000090500080007060000503008400609000007000004860000",
            "000035900000100000605008200709000020500070003020000408003800509000009000004610000",
            "000034500000600000108009700309000070700080005050000108001400203000008000004290000",
            "000012300000400000105006700306000050700080009050000104001500903000004000003890000",
            "000031200000200000603008400208000050300060001070000806009700602000009000002510000",
            "000036200000200000506008400208000050300060001090000804009700602000003000003510000",
            "000012300000400000305006700806000050400070009030000402004300201000004000007920000",
            "000029100000100000106003700401000090500080006060000403007800604000007000008560000",
            "000012300000400000904005700406000020300060007050000106008700402000001000003680000",
            "000012300000300000104005200406000070700080009020000108001400903000001000003850000",
            "000012300000300000104005600305000060600070004080000107001200903000001000003740000",
            "000012300000300000104005600207000010800030002060000807003800109000003000002140000",
            "000012300000400000104005200607000080400070003080000504008500109000006000005320000",
            "000027600000900000802004500904000050500030008060000104001200809000008000009360000",
            "000012300000400000105006700306000040700020008080000109001500403000001000003980000",
            "000012300000300000204005600307000020800020009090000507006100408000008000001490000",
            "000012300000400000104005200305000020200060007080000106001700403000001000003690000",
            "000061700000500000406007300302000050500080001070000902009600408000009000003870000",
            "000012300000400000103005600705000060600070008020000107001300409000001000002780000",
            "000091400000700000503004900704000050900020001020000604006300507000006000007810000",
            "000054700000100000602003100906000010100030002040000508007800604000007000001940000",
            "000012300000400000102005600304000060600020007080000109001800402000001000003970000",
            "000012300000400000102005600407000080500040001060000702005100207000007000003820000",
            "000012300000300000405006100702000030600040008050000902008900604000003000007480000",
            "000012300000400000401003500602000030300050007070000805005600108000005000003780000",
            "000012300000400000501003600106000030700080006040000709009300208000006000004250000",
            "000012300000300000401005600605000010700080009020000704007600102000003000006920000",
            "000012300000400000305006800406000080200080007070000104008200405000003000007560000",
            "000031200000200000603008400208000040400050001070000908009300602000009000002510000",
            "000032500000400000605008400908000030300060004070000806009700602000009000004510000",
            "000028500000700000902005700403000070700010008050000603006200904000006000004150000",
            "000017500000200000702004600407000020300020005060000803004500901000009000008430000",
            "000012300000400000105006700701000080900040002080000906009300205000009000004120000",
            "000024700000500000307006200208000040900050006070000108009700601000009000005610000",
            "000075100000100000906004700401000020500030006060000403007800602000007000002560000",
            "000034700000500000304008200208000040900050006070000908009700601000009000005610000",
            "000012300000400000105006700701000020800040009030000806008300905000008000004190000",
            "000012300000400000402003100503000020600070004080000601006800209000006000007590000",
            "000012300000400000105006700706000020800050003090000806008300609000008000004560000",
            "000012300000400000506007100201000080800030007090000501008100706000008000004750000",
            "000012300000400000401005600705000010600020007030000806003600109000001000006590000",
        };
        #endregion

        public class Board : IEquatable<Board>
        {
            #region Equality
            public bool Equals(Board other)
            {
                if (ReferenceEquals(null, other)) return false;
                if (ReferenceEquals(this, other)) return true;
                if (Size != other.Size) return false;
                bool same = true;
                for (byte x = 0; x < Size; x++)
                    for (byte y = 0; y < Size; y++)
                        same &= Equals(_board[x, y], other._board[x, y]);
                return same;
            }

            public override bool Equals(object obj)
            {
                if (ReferenceEquals(null, obj)) return false;
                if (ReferenceEquals(this, obj)) return true;
                if (obj.GetType() != this.GetType()) return false;
                return Equals((Board)obj);
            }

            public override int GetHashCode()
            {
                return _board?.GetHashCode() ?? 0;
            }

            public static bool operator ==(Board left, Board right)
            {
                return Equals(left, right);
            }

            public static bool operator !=(Board left, Board right)
            {
                return !Equals(left, right);
            }
            #endregion

            private readonly byte[,] _board;
            private readonly BitVector64[] _horizontalLines;
            private readonly BitVector64[] _verticalLines;
            private readonly BitVector64[] _boxes;
            public readonly byte Size;
            private readonly byte _digits;
            private readonly byte _root;

            private int Box(int x, int y)
            {
                int horizontal = x / _root;
                int vertical = y / _root;
                return horizontal * _root + vertical;
            }

            public byte this[byte x, byte y]
            {
                get
                {
                    return _board[x, y];
                }
                set
                {
                    if (value == _board[x, y]) return;
                    if (_board[x, y] != 0)
                    {
                        int index = _board[x, y] - 1;
                        _horizontalLines[x][index] = true;
                        _verticalLines[y][index] = true;
                        _boxes[Box(x, y)][index] = true;
                        _board[x, y] = 0;
                    }
                    if (value != 0)
                    {
                        int index = value - 1;
                        if (!(_horizontalLines[x][index] & _verticalLines[y][index] & _boxes[Box(x, y)][index]))
                        {
                            throw new InvalidOperationException(
                                $"Set dissalowed by a region, horizontal {_horizontalLines[x][index]}, vertical {_verticalLines[y][index]}, box {_boxes[Box(x, y)][index]}");
                        }
                        _horizontalLines[x][index] = false;
                        _verticalLines[y][index] = false;
                        _boxes[Box(x, y)][index] = false;
                        _board[x, y] = value;
                    }
                }
            }

            public BitVector64 Options(int x, int y)
            {
                return _horizontalLines[x] & _verticalLines[y] & _boxes[Box(x, y)];
            }

            public Board(byte size)
            {
                if (size < 1 || size > 64) throw new IndexOutOfRangeException($"Size smaller then 1 (no board), or larger then 64 (too large), size: {size}");
                Size = size;
                _digits = (byte)Math.Ceiling(Math.Log10(size));
                _root = (byte)Math.Sqrt(Size);

                // Initialise empty board
                _board = new byte[Size, Size];

                // Initialise empty regions
                _horizontalLines = new BitVector64[Size];
                _verticalLines = new BitVector64[Size];
                _boxes = new BitVector64[Size];

                // Initial bitVector64 has all bits till size on true
                BitVector64 bitVector64 = new BitVector64();
                for (int i = 0; i < Size; i++)
                {
                    bitVector64[i] = true;
                }

                // Set initial bitVector for all regions
                for (int i = 0; i < Size; i++)
                {
                    _horizontalLines[i] = bitVector64;
                    _verticalLines[i] = bitVector64;
                    _boxes[i] = bitVector64;
                }
            }

            public override string ToString()
            {
                StringBuilder prettyString = new StringBuilder((Size + _root + 2) * (Size + _root + 2));
                StringBuilder line = new StringBuilder(Size + _root + 2);
                line.Append('+');
                for (int i = 0; i < _root; i++)
                {
                    line.Append('-', 1 + _root + _root * _digits);
                    line.Append('+');
                }
                string blokSplit = line.ToString();
                prettyString.AppendLine(blokSplit);
                for (int i = 0; i < _root; i++)
                {
                    for (int j = 0; j < _root; j++)
                    {
                        int x = i * _root + j;
                        line.Clear();
                        line.Append('|');
                        for (int k = 0; k < _root; k++)
                        {
                            for (int l = 0; l < _root; l++)
                            {
                                int y = k * _root + l;
                                int value = _board[x, y];
                                line.Append(' ');
                                line.Append(value == 0 ? new string(' ', _digits) : value.ToString("d" + _digits));
                            }
                            line.Append(" |");
                        }
                        prettyString.AppendLine(line.ToString());
                    }
                    prettyString.AppendLine(blokSplit);
                }
                return prettyString.ToString();
            }
        }

        /// <summary>
        /// 0 indexes are unknown, every number needs to have the same size, pad with zeros
        /// </summary>
        public Board Read(byte size, string partial)
        {
            Board board = new Board(size);
            byte digits = (byte)Math.Ceiling(Math.Log10(size));
            for (byte i = 0; i < size; i++)
            {
                for (byte j = 0; j < size; j++)
                {
                    board[i, j] = byte.Parse(partial.Substring((i * size + j) * digits, digits));
                }
            }
            return board;
        }

        public bool SolveBruteForce(Board board)
        {
            for (byte x = 0; x < board.Size; x++)
                for (byte y = 0; y < board.Size; y++)
                {
                    if (board[x, y] == 0)
                    {
                        for (byte i = 0; i < board.Size; i++)
                        {
                            if (board.Options(x, y)[i])
                            {
                                board[x, y] = (byte)(i + 1);
                                if (SolveBruteForce(board)) return true;
                                board[x, y] = 0;
                            }
                        }
                        return false;
                    }
                }
            return true;
        }

        public bool SolveBinaryHeap(Board board)
        {
            BinaryHeap<OptionPoint> binaryHeap = new BinaryHeap<OptionPoint>(false); // Make a minheap of all possible moves
            for (byte i = 0; i < board.Size; i++)
                for (byte j = 0; j < board.Size; j++)
                {
                    if (board[i, j] == 0)
                    {
                        binaryHeap.Insert(new OptionPoint(i, j, board.Options(i, j)));
                    }
                }
            if (binaryHeap.Count == 0) return true;
            OptionPoint minOptionPoint = binaryHeap.Peak();
            for (byte i = 0; i < board.Size; i++)
            {
                if (minOptionPoint.BitVector64[i])
                {
                    board[minOptionPoint.X, minOptionPoint.Y] = (byte)(i + 1);
                    if (SolveBinaryHeap(board)) return true;
                    board[minOptionPoint.X, minOptionPoint.Y] = 0;
                }
            }
            return false;
        }

        public class OptionPoint : IComparable<OptionPoint>
        {
            public OptionPoint(byte x, byte y, BitVector64 bitVector64)
            {
                X = x;
                Y = y;
                _options = bitVector64.Count;
                BitVector64 = bitVector64;
            }
            public readonly byte X;
            public readonly byte Y;
            private readonly byte _options;
            public readonly BitVector64 BitVector64;

            public int CompareTo(OptionPoint other)
            {
                return _options.CompareTo(other._options);
            }
        }
    }
}
